#
# Find the minimal convex hull for a set of n points on a plane
# The main loop starts right from the two extremal points
# New plotting and printing routines
#
from pylab import *
import sys
import copy

def plot_dots(ix, r):
    N = r.shape[0]
    print 'ix = ', ix
    for i in xrange(N):
        if ix[i] == -1: plot(r[i,0], r[i,1], 'b.')
        if ix[i] ==  2: plot(r[i,0], r[i,1], 'ro') # Border points
        if ix[i] ==  0: plot(r[i,0], r[i,1], 'g.')
        if ix[i] ==  1: plot(r[i,0], r[i,1], 'm.')

def plot_border(bd, r):
    nbd = len(bd)
    N = r.shape[0]
    for i in xrange(nbd):
        i1 = mod((i+1), nbd)   # If i+1 < nbd, i1 = i+1, if i == nbd, i1 = 0
        plot((r[bd[i],0], r[bd[i1],0]), (r[bd[i],1], r[bd[i1],1]), 'b')
        axis('equal'); grid(1)

def print_border(bd, r):
    nbd = len(bd)
    N = r.shape[0]
    for i in xrange(nbd):
        i1 = mod((i+1), nbd)   # If i+1 < nbd, i1 = i+1, if i == nbd, i1 = 0
        print bd[i], r[bd[i],:], '->', bd[i1], r[bd[i1],:]
    print 'bd = ', bd


def convex_hull_2d(r):
    """
    Finds the convex hull, i.e. a minimal polygon for a set of N points.
    The points are provided as Cartesian pairs (x,y) in the 2D array r[N,2].
    The function returns a list of the border indices.
    """
    #
    # Each element of the array ix[N] contains current properties
    # of each point:
    # -1: candidate for the interior;
    #  2: border point
    #  0: interior point
    #  1: exterior point
    # Obviously, for each ix element two bits (i.e. 4 states) is enough.
    #

    N = r.shape[0]  # Height of the column
    ix = empty(N,dtype=int)
    #
    # Seed all the points with (-1)s 
    #
    ix[:] = -1

    #
    # Find 2 initial points. They will be on the border.
    #
    imin = argmin(r[:,1])
    imax = argmax(r[:,1])
    ix[imin] = 2
    ix[imax] = 2
    print 'ymin = ', r[imin,1], ', ymax = ', r[imax,1]
    print 'imin = ', imin, ', imax = ', imax
    #
    # Form initial border vertex list from the two extremal points.
    # The border now consists of two (coincident) segments
    #
    bd = [imin, imax]   # List of border elements

    #
    # Main loop
    #
    extr = True
    #ncyc = 0

    while extr:
        nbd = len(bd)
        #print ncyc, ': bd = ', bd, ', nbd = ', nbd
        bd1 = copy.copy(bd)
        pbd = 0 # Pointer to the end of segment
        # Seed all the non-zero and non-2 points with -1
        #for i in xrange(N):
        #    if (ix[i] != 0) and (ix[i] != 2): ix[i] = -1
        for i in xrange(nbd):
            pbd = pbd + 1
            i1 = mod((i+1), nbd)   # End element points at start element
            seg = r[bd[i1],:] - r[bd[i],:]        # Segment vector
            lseg = vector_lengths(seg) # Its length as sqrt(sum(seg**2))
            dmaxr = -1.0  # Right distance can only be positive
            for j in xrange(N):
                if ix[j] == 0: continue # Avoid interior (ix=0) 
                if ix[j] == 2: continue # Avoid border (ix=2) 
                pt = r[j,:] - r[bd[i],:] # Vect. from i-th vert. to a j-th p.
                lpt = vector_lengths(pt)
                # Left(-) or right(+) position of j-th point wrt to i-th segment
                psinph = (seg[1]*pt[0] - seg[0]*pt[1])/lseg  # lpt*sin(phi)
                if psinph >= 0.0:
                    ix[j] = 1 # Mark r[j,:] as exterior point
                    if psinph > dmaxr:  # Ext. point farthest from seg.
                        dmaxr = psinph
                        jmaxr = j
            print 'i= ', i, ', jmaxr= ', jmaxr, ', dmaxr= ', dmaxr
            if dmaxr >= 0: # Farthest exterior point found
                bd1.insert(pbd,jmaxr) # Insert new vort. bw i-th and (i+1)-th
                pbd = pbd + 1
                ix[jmaxr] = 2  # Mark as border point
        extr = False
        for j in xrange(N):
            if ix[j] == -1: ix[j] = 0
            if ix[j] ==  1:
                extr = True
                ix[j] = -1 # The points outside the current polygon

        #print_border(bd, r)
        #print_border(bd1, r)
        print 'bd = ', bd
        print 'bd1 = ', bd1

        bd = bd1
        #ncyc = ncyc + 1
        #plot_border(bd1, r)
    return bd

#==========================================================================

#
# Main program entry
#

figure()

N = 200
#r = randn(N,2)  # All the points (x,y)
#r = randn(N,2)  # All the points (x,y)
## r = array([[ 9.1069,  5.9294],
##        [ 4.7098,  6.9861],
##        [ 7.0507,  1.0021],
##        [ 5.5045,  8.1813],
##        [ 6.1089,  0.181 ],
##        [ 4.0794,  7.095 ],
##        [ 5.2913,  1.3446],
##        [ 5.6192,  3.2317],
##        [ 7.6661,  9.0917],
##        [ 9.1876,  1.4305]])
## r = array([[ 1.02677541, -0.48162641],
##            [ 0.54907235, -0.19397868],
##            [ 0.71505191, -1.03105436],
##            [ 1.06961242,  0.72044968],
##            [ 0.70571921, -0.61576022],
##            [ 2.21749342, -0.46060709],
##            [-2.27663607,  0.25821749],
##            [-1.1782859 ,  0.78281951],
##            [-2.51672056, -0.13071071],
##            [-1.03577271,  0.3834936 ],
##            [ 0.33693949, -0.3245282 ],
##            [-0.21501661,  0.01566404],
##            [-0.98374643, -0.83496041],
##            [-0.0153529 ,  0.3584528 ],
##            [-0.4122157 ,  0.02369746],
##            [-1.11732996,  0.69880934],
##            [-1.11420218, -0.26354779],
##            [ 0.54062958,  1.49398492],
##            [ 1.60293165, -0.2618389 ],
##            [-0.25380726,  0.59170573]])
r = array([[ 1.41001715, -2.07579694],
       [-0.71262253,  0.63058489],
       [ 0.15972247, -0.84749601],
       [-0.5616496 , -0.72419253],
       [-0.96015496,  0.83756824],
       [-0.81266643,  0.93397142],
       [ 0.82791303,  0.90962915],
       [ 1.39797865, -0.56147214],
       [ 0.92243459,  1.6887128 ],
       [ 0.81493239,  1.62736628],
       [-1.58873564,  0.60214325],
       [-2.12234588, -0.02103921],
       [ 0.66714176, -0.48827247],
       [ 0.29240815,  0.50992053],
       [-0.26937556,  0.51455892],
       [ 0.51052046, -0.44668837],
       [ 0.69181422, -0.33650872],
       [-1.56495856, -0.30912941],
       [ 1.03470441, -0.50318135],
       [-1.15605592, -0.53377624],
       [ 1.9776087 , -1.08197837],
       [ 0.16410304, -0.81111281],
       [ 0.78658086, -0.62186298],
       [ 0.8194334 ,  0.36636591],
       [-0.60329431, -0.61911511],
       [-1.1345071 , -0.46335233],
       [-1.41601101,  0.89146904],
       [ 1.02644544,  0.58880174],
       [-0.46838154, -0.15046326],
       [-1.81346729, -0.265586  ],
       [-0.52101256,  0.90650852],
       [ 0.97261731,  1.52157282],
       [-1.20288419,  0.28765299],
       [ 0.39001483, -0.11690322],
       [-0.73398716,  1.15396358],
       [ 0.47660078, -0.28371249],
       [ 0.76178141,  2.15036301],
       [-1.1635282 ,  0.14744992],
       [ 1.02797888,  0.76654698],
       [ 0.20787306, -0.31112362],
       [ 0.98152339,  1.05489112],
       [ 0.80126344, -0.10905096],
       [ 0.5158361 , -0.52489402],
       [-0.39741813, -0.71106212],
       [-0.36662912,  1.82889691],
       [-1.62832152,  0.52841834],
       [ 0.07116648,  0.61985069],
       [-0.41597831, -1.55409853],
       [ 1.08192606,  0.11393325],
       [ 0.39313995, -1.03070093],
       [-0.31629647, -1.48902248],
       [ 0.56885102,  1.65252023],
       [ 0.20244321, -1.2082771 ],
       [ 0.09916902,  0.78942094],
       [-0.54966328, -0.26989798],
       [ 0.43378463, -0.33482696],
       [-0.24316079,  1.17494795],
       [ 0.69360527,  0.64635025],
       [-2.87427549,  0.34536643],
       [-0.01614505, -0.66479399],
       [-0.9349412 , -0.17642232],
       [-0.35818279,  0.59778748],
       [ 1.51415258, -0.0283097 ],
       [ 0.8603716 ,  0.25841346],
       [ 1.62499087,  0.24960909],
       [ 0.75403237,  0.41673296],
       [ 0.90582035, -0.60930004],
       [-2.37190597, -0.13100645],
       [ 0.52286471,  1.41844716],
       [ 1.6783149 , -1.22535696],
       [-0.19341401, -0.4851966 ],
       [ 0.18600612,  0.01883063],
       [-0.45364272, -0.0315339 ],
       [-0.87619825, -1.89780284],
       [ 0.46258115,  0.84029029],
       [ 0.85988464, -0.39104015],
       [ 1.13095262, -0.54100446],
       [ 0.58179824, -0.03518014],
       [-2.03488965, -1.45967197],
       [-1.35296343,  0.79637138],
       [-3.76147805, -0.38762368],
       [-1.03018066,  0.85572667],
       [ 1.16979381, -0.10889455],
       [ 2.02023553, -0.21581707],
       [-0.43732278, -0.58534834],
       [-0.88910653, -1.55317241],
       [ 0.49461522, -2.01097125],
       [ 1.01537529, -1.25599735],
       [-1.52080213,  1.16333933],
       [-1.89561131,  0.16381293],
       [-0.37623098, -0.53733295],
       [-1.68825854, -0.92482788],
       [ 0.49921125,  0.79016662],
       [-0.76740085,  0.18912928],
       [ 0.60323181,  0.15082756],
       [ 0.46184274,  1.24022962],
       [ 1.17821954,  0.79122954],
       [ 1.19748764, -1.57307095],
       [ 0.05359043, -0.53936841],
       [ 0.68287882, -2.57660394],
       [-0.11744071, -0.4645691 ],
       [ 0.08893   ,  0.53928494],
       [-1.02621238,  1.05834478],
       [-0.89588254,  0.65933518],
       [-1.45790571,  0.4709492 ],
       [-0.1289974 ,  0.86265729],
       [-0.69644265,  0.87731672],
       [-0.16539605,  0.1227789 ],
       [-0.82764763,  0.59840492],
       [-0.87862987,  0.28378704],
       [-1.33747665,  1.00324187],
       [-0.94601956, -1.82517725],
       [ 1.24236039,  0.41026282],
       [-0.81573284,  0.1776745 ],
       [ 0.28040831,  0.55449598],
       [-0.1101862 , -1.09540971],
       [ 0.87006634,  0.82711385],
       [ 0.71979066,  2.34418462],
       [ 0.16183497,  0.01629704],
       [ 1.19185827, -0.24202588],
       [ 0.71502416, -0.14448008],
       [-0.413064  , -0.02220984],
       [-1.96646308, -0.10924721],
       [-0.39956338, -0.04704838],
       [-0.57887083,  0.28704352],
       [ 0.85176405, -0.85203367],
       [ 0.29582913,  0.07379949],
       [ 0.3991719 ,  1.03160386],
       [-0.91049207, -2.16267674],
       [-2.40045587, -0.62584371],
       [-0.03696398,  0.98943044],
       [-1.72191155,  1.19814947],
       [-1.89150731,  0.76981462],
       [-0.49604716, -0.29898428],
       [-0.73466121, -0.2882262 ],
       [-1.32470887,  1.00075801],
       [ 2.38623457,  1.35644473],
       [ 0.82003527, -0.78044989],
       [ 0.45870549, -0.90082774],
       [-0.69480607, -1.32409339],
       [ 0.80841607,  1.47123409],
       [ 0.52293278,  0.47767008],
       [ 0.67404492, -0.7808254 ],
       [ 1.19922276, -1.43584063],
       [-0.35340489, -0.64851896],
       [ 2.18066193, -0.19855882],
       [-1.39857136, -0.70698125],
       [-1.04561701,  1.41071579],
       [ 0.47613251,  0.20045453],
       [-0.54119591, -0.93434929],
       [ 0.73047828,  0.62569819],
       [ 1.16805461, -2.18844078],
       [ 0.21632004, -0.15057413],
       [ 0.99645565, -2.50181718],
       [-0.48495798,  0.71729588],
       [-0.57127993,  1.94134182],
       [ 0.73443369,  0.89069232],
       [ 0.82026038, -1.79930839],
       [ 0.5943272 , -0.63745673],
       [-0.22696613, -0.11948551],
       [ 0.81403239, -0.35874066],
       [ 0.53694238, -1.62681264],
       [-1.29092135,  0.13795974],
       [ 0.67381799,  0.31283292],
       [-1.15402297, -0.60884406],
       [ 0.02192434, -0.65029738],
       [ 0.63307579,  1.50488571],
       [ 0.5460718 ,  0.78364773],
       [ 0.56339361,  0.47218313],
       [-0.14911696, -0.67128021],
       [-2.01308609,  0.58232751],
       [ 0.09428485,  0.3906286 ],
       [-0.90883076,  1.6154601 ],
       [-0.44198493,  0.51290355],
       [-2.98734599, -0.25305075],
       [ 0.61526771,  0.52562496],
       [-0.87806382,  0.21615395],
       [ 0.07861637,  0.04313552],
       [-0.78508218, -1.14573496],
       [-1.51316525,  0.57694463],
       [ 0.78632283,  1.11527337],
       [ 0.01467728, -0.98568305],
       [-0.96567005, -1.91708003],
       [ 0.60154413,  0.66900444],
       [-0.78188839, -0.33014671],
       [ 1.00656515, -0.72101133],
       [ 1.46335865, -0.7244026 ],
       [ 0.46778272,  0.37864669],
       [-0.14067048,  0.09243727],
       [ 0.91711525, -0.22689857],
       [ 1.63572251,  0.51721716],
       [-0.30199629,  0.72405953],
       [-0.63734161,  0.11974555],
       [-1.4961817 , -0.49528001],
       [ 0.06802954,  0.52251654],
       [ 0.74377164,  0.80915039],
       [ 0.89374507,  0.96131348],
       [ 0.42478447, -0.57923   ],
       [-0.7274392 , -1.78486367],
       [ 0.26839305, -0.2196784 ]]) 

bd = convex_hull_2d(r)

#
# Plot new border
#
print 'New border:'
plot(r[:,0], r[:,1], 'g.'); axis('equal'); grid(1)
plot_border(bd, r)
print_border(bd, r)
show()
