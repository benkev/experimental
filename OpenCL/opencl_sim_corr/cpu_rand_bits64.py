""" 
The algorithms are obtained from the webpage by Prof. Sebastiano Vigna
"Xoshiro / xoroshiro generators and the PRNG shootout" at
http://xoshiro.di.unimi.it/
"""
import sys
import numpy as np
import pyrandl
from pyrandl import PyRandl

seed = 90752

Nwitem = 4
Nwgroup = 1;
# Nwitem = 128
# Nwgroup = 10;
Nrnd = 10000;

Nrnd_total = Nwitem * Nwgroup * Nrnd
Nproc = Nwitem*Nwgroup

rnums = np.zeros((Nproc, Nrnd), dtype=np.uint64)

prng = PyRandl(seed, Nproc)   # Setup the initial states for Nproc generators 

rndst = prng.get_rndst()


print("rndst:")
for i in range(4):
    print("%18x %18x %18x %18x" % tuple(rndst[i,:]))
print


#
# Generate random numbers
#
rn_max = 0
rn_min = sys.maxint

for iseq in range(Nproc):
	for irnd in range(Nrnd):
		rn = prng.rand64_bits(iseq)
		rnums[iseq,irnd] = rn
		if rn < rn_min: rn_min = rn
		if rn > rn_max: rn_max = rn


for i in range(265,301):
	print('%18x %18x %18x %18x' % tuple(rnums[:4,i]))


#
# Test correctness of the splitmix64 generator
#
print('\n\n')
print "Test correctness of the splitmix64 generator"

prng = PyRandl(1111, 1)

xstate = 0x12345
prng.set_xstate(xstate)
rn = 0

print 'xstate = ', '0x%lx' % xstate
print 'splitmix64:'

for i in range(10):
	print("%18lx %18lx" % (rn, xstate))
	rn = prng.splitmix64()
	xstate = prng.get_xstate()
print("%18lx %18lx" % (rn, xstate))
		  

#
# O'Neil examples: 5 duplicates are generated by some initial states
# http://www.pcg-random.org/posts/implausible-output-from-xoshiro256.html
#
prng = PyRandl(1111, 2)

rndst = np.zeros((2,4), dtype=np.uint64)

# 0xf1ece002a3004704  repeats 5 times for:
rndst[0,0] = 0x216b13fa05d2c01e;
rndst[0,1] = 0x0165f953d45afc83;
rndst[0,2] = 0x7557a4909bdae724;
rndst[0,3] = 0x10718ed2c884dc75;

# 0xbf18dec850198308 repeats 5 times for: 
rndst[1,0] = 0x1a3e1765f0739e39;
rndst[1,1] = 0xf5d7f1bb420e645d;
rndst[1,2] = 0x16a5269645b3a76f;
rndst[1,3] = 0xbb126a5fd07a5f1e;

prng.set_rndst(rndst)

print('\n\n')
print "O'Neil examples: 5 duplicates are generated by some initial states"
print "                 Check f1ece002a3004704 and bf18dec850198308"
print
for irnd in range(160):
	rn1 = prng.rand64_bits(0)
	rn2 = prng.rand64_bits(1)
	print '%4d %18x %18x' % (irnd, rn1, rn2)


#
# Normally distributed random numbers
#
Nwitem = 16
Nwgroup = 10;
Nrnd = 10000;
Nrnd_total = Nwitem * Nwgroup * Nrnd
Nproc = Nwitem*Nwgroup

rdbls = np.zeros((Nproc, Nrnd), dtype=np.float64)

prng = PyRandl(seed, Nproc)   # Setup the initial states for Nproc generators 
rndst = prng.get_rndst()

#
# Generate random doubles (np.float64)
#
rd_max = -1e30
rd_min = 1e30

for iseq in range(Nproc):
	for irnd in range(Nrnd):
		rd = prng.randn64(iseq)
		rdbls[iseq,irnd] = rd
		if rd < rd_min: rd_min = rd
		if rd > rd_max: rd_max = rd


for i in range(265,301):
	print('%18g %18g %18g %18g' % tuple(rdbls[:4,i]))




